@using ByteCuisine.Client.Services;
@using ByteCuisine.Shared;
@inject UserStateService UserState
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />

<div id="container">
    <div id="top-section">
        <div id="featured-recipe">
            <div id="recipe-details">
                <div id="user-profile">
                    @* PROFIL *@
                    <img src="data:image/png;base64,@Convert.ToBase64String(userImage)" alt="user-image" id="user-image" />
                    <div id="user-name">@userName</div>
                </div>
                <div id="recipe-info">
                    <h1>@bannerName</h1>
                    <p>@bannerDescription</p>
                    <div id="action-container">
                        <button id="check-recipe-btn" @onclick="() => NavigateToRecipe(bannerId)">Przejdź do przepisu</button>
                    </div>
                </div>
            </div>
            <div id="recipe-image">
                <img src="data:image/png;base64,@Convert.ToBase64String(bannerImage)" alt="dish-image" />
            </div>
        </div>

        <div id="popular-chefs">
            <div id="blur">
                <h1 id="popularchef">Popular Chefs</h1>

                @if(users.Count == 0)
                {
                    <p>Brak użytkowników</p>
                }
                else
                {
                    @for(int i = 0; i < users.Take(3).Count(); i++)
                    {
                        var chef = users[i];
						<div class="chef" @onclick="() => change_baner(chef)">
                            <span class="material-icons 
                                @(i switch {
								0 => "gold-crown",
								1 => "silver-crown",
								2 => "bronze-crown",
								_ => ""
							})">emoji_events</span>
							<img src="data:image/png;base64,@Convert.ToBase64String(chef.PictureData)" alt="chef" class="chef-image"/>
                            <div class="chef-name">@chef.Username</div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <h2>Potrawy, które jesteś w stanie przyrządzić</h2>
    <div class="carousel-container">
        <button @onclick="RollLeft" class="carousel-button left-button">
            <span class="material-symbols-outlined">arrow_back_ios</span>
        </button>
        <div class="carousel">
            @foreach (var dish in allDishes)
            {
                <div class="card">
                    <img src="data:image/png;base64,@Convert.ToBase64String(dish.DishImage)" alt="@dish.Name" class="dish-image" />
                    <div>@dish.Name</div>
                    <div>@categories.FirstOrDefault(c => c.Id == dish.CategoryId)?.CategoryName</div>
                </div>
            }
        </div>
        <button @onclick="RollRight" class="carousel-button right-button">
            <span class="material-symbols-outlined">arrow_forward_ios</span>
        </button>
    </div>
        <button class="btn btn-success" @onclick="@NavigateToNewPage">Dodaj swoje własne przepisy!</button>
</div>




@code {

    // Zminne głównego bannera
    private byte[] userImage;
    private string userName;
    private byte[] bannerImage;
    private string bannerName;
    private string bannerDescription;
    private int bannerId;

    List<Category> categories = new List<Category>();
    List<Dish> allDishes = new List<Dish>();
    List<Account> users = new List<Account>();

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<Account>>("api/account");
        allDishes = await Http.GetFromJsonAsync<List<Dish>>("api/dish");
        categories = await Http.GetFromJsonAsync<List<Category>>("api/category");

        // Domyślne ustawienia bannera
        userImage = users.FirstOrDefault(u => u.User_Id == 1)?.PictureData;
        userName = users.FirstOrDefault(u => u.User_Id == 1)?.Username;
        bannerImage = allDishes.FirstOrDefault(d => d.Dish_Id == 1)?.DishImage;
        bannerName = allDishes.FirstOrDefault(d => d.Dish_Id == 1)?.Name;
        bannerDescription = allDishes.FirstOrDefault(d => d.Dish_Id == 1)?.Description;
        bannerId = 1;
    }

    private void NavigateToRecipe(int dish_id)
    {
        Navigation.NavigateTo($"/recipepage/{dish_id}");
    }


    private void NavigateToNewPage()
    {
        Navigation.NavigateTo("/addrecipe");
    }

    private List<string> WszystkiePrzepisy = new List<string>
    {
        "Stek", "Jedzenie Wegetariańskie", "Posiłek", "Stek", "Stek", "Stek", "Stek", "Stek"
    };
    private int aktualnyIndeks = 0;
    private int widocznaIlosc = 1;
    private List<string> WidocznePrzepisy => WszystkiePrzepisy
        .Skip(aktualnyIndeks)
        .Take(widocznaIlosc)
        .ToList();

    private void RollLeft()
    {
        if (aktualnyIndeks > 0)
        {
            aktualnyIndeks--;
        }
    }

    private void RollRight()
    {
        if (aktualnyIndeks < WszystkiePrzepisy.Count - widocznaIlosc)
        {
            aktualnyIndeks++;
        }
    }

    private void change_baner(Account account)
    {
        userImage = account.PictureData;
        userName = account.Username;

        // Zmiana bannera
        bannerImage = allDishes.FirstOrDefault(d => d.Dish_Id == account.User_Id)?.DishImage;
        bannerName = allDishes.FirstOrDefault(d => d.Dish_Id == account.User_Id)?.Name;
        bannerDescription = allDishes.FirstOrDefault(d => d.Dish_Id == account.User_Id)?.Description;
        bannerId = account.User_Id;

        StateHasChanged();
    }


}