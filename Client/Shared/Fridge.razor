@using ByteCuisine.Shared
@using ByteCuisine.Client.Services
@inject HttpClient Http
@inject UserStateService UserState
@inject NavigationManager Navigation

<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<div class ="background-container">
    <div class="tlo-pudlo">
        <div class="tlo"></div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6 d-flex flex-column align-items-center">
                <h2 class="section-title">Virtual Fridge</h2>

                <div class="list-back-fridge">
                    <ul class="product-list-fridge">
                        @foreach (var product in fridge)
                        {
                            var ingredient = ingredients.FirstOrDefault(i => i.Ingredient_Id == product.Ingredient_Id)?.Image;
                            <li class="product-fridge">
                                @if (ingredient != null)
                                {
                                    <img src="data:image/png;base64,@Convert.ToBase64String(ingredient)" />
                                }
                                else
                                {
                                    <span>No image available</span>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="col-md-6 d-flex flex-column align-items-center">
                <div class="search-section">
                    <h2 class="section-title">Search for ingredients</h2>
                    <div class="search-container">
                        <i class="material-icons search-icon">search</i>
                        <input type="text" id="search-igri" @bind="searchIngri" placeholder="Search for ingredients" />
                    </div>
                    <button class="search-button" @onclick="SearchIngri">Search</button>
                    <button class="search-button" @onclick="AddSelectedIngredients">Add Ingredients</button>
                    @* Lista składników *@

                    <div class="list-back">
                        <ul class="product-list">
                            @foreach (var ingri in products)
                            {
                                var ingredient = ingredients.FirstOrDefault(i => i.Ingredient_Id == ingri.Ingredient_Id);
                                if (ingredient != null)
                                {
                                    <li class="@GetItemClass(ingredient.Ingredient_Id)" @onclick="() => ToggleIngredientSelection(ingredient.Ingredient_Id)">
                                        <img src="data:image/png;base64,@Convert.ToBase64String(ingredient.Image)" alt="@ingredient.Name"/>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>

                <div class="search-section">
                    <h2 class="section-title">Search for recipes</h2>
                    <div class="search-container">
                        <i class="material-icons search-icon">search</i>
                        <input type="text" id="search-igri" @bind="searchText" placeholder="Search for recipes" />
                    </div>
                    <button class="search-button" @onclick="SearchDishes">Search</button>

                    @* Wyszukiwanie przepisów *@

                    <div class="list-back-pion">
                        <ul class="product-list-pion">

                            @if (dishesWithIngredientsFromFridge.Any())
                            {
                                foreach (var di in dishesWithIngredientsFromFridge)
                                {
                                    var dish = dishesWithIngredientsFromFridge.FirstOrDefault(i => i.Dish_Id == di.Dish_Id);
                                    <li class="@GetDishClass(dish.Dish_Id)" @onclick="() => ToggleDishSelection(dish.Dish_Id)">
                                        <img width="48" height="48" src="data:image/png;base64,@Convert.ToBase64String(dish.DishImage)" alt="@dish.Name" />
                                        @dish.Name
                                        <button class="search-button" @onclick="() => NavigateToRecipe(di.Dish_Id)">Go to recipe</button>
                                    </li>
                                }
                            }
                            else
                            {
                                <div>No dishes found.</div>
                            }
                        </ul>
                    </div>
                </div>

                <div class="search-section">
                    <h2 class="section-title">What you need:</h2>
                    <div class="search-container">
                        <i class="material-icons search-icon">search</i>
                        <input type="text" id="search-igri" @bind="searchMissing" placeholder="Search for what you need" />
                    </div>
                    <button class="search-button">Search</button>
                    
                    @* Wyszukiwanie brakujących składników *@
                    
                    <div class="list-back">
                        <ul class="product-list">
                            @foreach (var product in products)
                            {
                                <li class="list-item">@product</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    @* Funkcje zaznaczania składników *@

    private string GetItemClass(int ingredientId)
    {
        return selectedIngredientIds.Contains(ingredientId) ? "list-item selected" : "list-item";
    }

    private HashSet<int> selectedIngredientIds = new HashSet<int>();

    private void ToggleIngredientSelection(int ingredientId)
    {
        if (!selectedIngredientIds.Add(ingredientId))
        {
            selectedIngredientIds.Remove(ingredientId);
        }
    }

    @* Nawigacja do przepisu *@
    private void NavigateToRecipe(int dish_id)
    {
        Navigation.NavigateTo($"/recipepage/{dish_id}");
    }

    private HashSet<int> selectedDishIds = new HashSet<int>();

    @* Funkcje zaznaczania przepisów *@
    private string GetDishClass(int dishId)
	{
        return selectedDishIds.Contains(dishId) ? "list-item-pion selected" : "list-item-pion";
	}

    private void ToggleDishSelection(int dishId)
    {
        if (!selectedDishIds.Add(dishId))
        {
            selectedDishIds.Remove(dishId);
        }
    }


    @* Dodawanie składników do wirtualnej lodówki *@

    private async Task AddSelectedIngredients()
    {
        var currentUser = UserState.CurrentUser;    // Zalogowany użytkownik

        foreach (var ingredientId in selectedIngredientIds)
        {
            var fridgeModel = new IngredientsInFridgeDTO 
            { 
                Ingredient_Id = ingredientId,
                VirtualFridge_Id = currentUser,
            };
            using var response = await Http.PostAsJsonAsync($"api/ingredientsInFridge/user/{currentUser}", fridgeModel);
            if (!response.IsSuccessStatusCode)
            {   
                // Wypisz wiadomość z błędem         
                var errorMessage = response.ReasonPhrase;         
                Console.WriteLine($"There was an error! {errorMessage}");         
                return;     
            }
        }
        // Wyczyszczenie listy zaznaczonych składników
        selectedIngredientIds.Clear();

        // Odświeżenie listy produktów w wirtualnej lodówce
        fridge = await Http.GetFromJsonAsync<List<IngredientsInFridge>>($"api/ingredientsInFridge/user/{currentUser}");

        // Odświeżenie listy przepisów
        dishesWithIngredientsFromFridge.Clear();
        await LoadDishesWithIngredientsFromFridge();
    }

    @* Funkcja Dodająca Przepisy Zawierające Składniki z Lodówki *@
    
    List<Dish> dishesWithIngredientsFromFridge = new List<Dish>();

    private async Task LoadDishesWithIngredientsFromFridge()
    {
        var currentUser = UserState.CurrentUser;    // Zalogowany użytkownik
        var ingredientsInFridge = await Http.GetFromJsonAsync<List<IngredientsInFridge>>($"api/ingredientsInFridge/user/{currentUser}");
        var allDishIngredients = await Http.GetFromJsonAsync<List<DishIngredient>>("api/dishingredient");

        var dishIdsWithIngredientsFromFridge = allDishIngredients
            .Where(di => ingredientsInFridge.Any(iif => iif.Ingredient_Id == di.Ingredient_Id))
            .Select(di => di.Dish_Id)
            .Distinct();

        foreach (var dishId in dishIdsWithIngredientsFromFridge)
        {
            var dish = await Http.GetFromJsonAsync<Dish>($"api/dish/dishes/{dishId}");
            dishesWithIngredientsFromFridge.Add(dish);
        }

        StateHasChanged();
    }

    @* Ładowanie elementów z bazy *@

    private List<Ingredient> ingredients = new List<Ingredient>();
    private List<Ingredient> products = new List<Ingredient>();
    private List<IngredientsInFridge> fridge = new List<IngredientsInFridge>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDishesWithIngredientsFromFridge();

        ingredients = await Http.GetFromJsonAsync<List<Ingredient>>("api/ingredient");
        products = await Http.GetFromJsonAsync<List<Ingredient>>("api/ingredient");
        // Pobranie z bazy produktów wirtualnej lodówki
        int currentUser = UserState.CurrentUser;
        fridge = await Http.GetFromJsonAsync<List<IngredientsInFridge>>($"api/ingredientsInFridge/user/{currentUser}");
    }

    @* Wartości z pól wyszukiwania *@
    private string searchIngri;
    private string searchRecipe;
    private string searchMissing;
    @* Wyniki wyszukiwania *@
    private List<string> recipes = new List<string>();
    private List<string> missing_products = new List<string>();
    string searchText = string.Empty;
    List<Dish> filteredDishes = new List<Dish>();






    @* Funkcje wyszukujące kliknięciu przycisku *@

    private void SearchIngri()
    {
        products.Clear();

        if (string.IsNullOrEmpty(searchIngri))
        {
            products = ingredients;
        }
        else
        {
            foreach (var ingredient in ingredients)
            {
                if (ingredient.Description.Contains(searchIngri) || ingredient.Name.Contains(searchIngri))
                {
                    products.Add(ingredient);
                }
            }
        }
    }
    void SearchDishes()
    {
        filteredDishes = dishesWithIngredientsFromFridge
            .Where(dish => dish.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                        || dish.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();

        StateHasChanged();
    }
    private void SearchMissing()
    {
        return;
    }
}
