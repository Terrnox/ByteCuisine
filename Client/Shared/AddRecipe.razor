@using System.Collections.Generic
@using System.Linq
@using ByteCuisine.Shared
@inject HttpClient Http

<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<div class="container mt-5">
    <h3>AddRecipe</h3>
    <EditForm Model="@recipe" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Nazwa potrawy</label>
            <InputText id="name" class="form-control" @bind-Value="recipe.Name" />
        </div>

        <div class="form-group">
            <label for="description">Opis przyrządzenia</label>
            <InputTextArea id="description" class="form-control" @bind-Value="recipe.Description" />
        </div>

        <div class="form-group">
            <label for="category">Kategoria przepisu</label>
            <InputSelect id="category" class="form-control" @bind-Value="recipe.Category">
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryName">@category.CategoryName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <div class="search-section">
                <h2 class="section-title">Search for ingredients</h2>
                <div class="search-container">
                    <i class="material-icons search-icon">search</i>
                    <input type="text" id="search-igri" @bind="searchIngri" placeholder="Search for ingredients" />
                </div>
                <button class="search-button" @onclick="SearchIngri">Search</button>
                
                @* Lista składników *@

                <div class="list-back">
                    <ul class="product-list">
                        @foreach (var ingri in products)
                        {
                            var ingredient = ingredients.FirstOrDefault(i => i.Ingredient_Id == ingri.Ingredient_Id);
                            if (ingredient != null)
                            {
                                <li class="@GetItemClass(ingredient.Ingredient_Id)" @onclick="() => ToggleIngredientSelection(ingredient.Ingredient_Id)">
                                    <img src="data:image/png;base64,@Convert.ToBase64String(ingredient.Image)" alt="@ingredient.Name" />
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-success">Dodaj przepis</button>
    </EditForm>
</div>


@code {
    private string searchIngri;
    private List<ByteCuisine.Shared.Ingredient> ingredients = new List<ByteCuisine.Shared.Ingredient>();
    private List<ByteCuisine.Shared.Ingredient> products = new List<ByteCuisine.Shared.Ingredient>();
    private Recipe recipe = new Recipe();
    private List<Category> categories = new List<Category>();


    @* Funkcje zaznaczania składników *@

    private string GetItemClass(int ingredientId)
    {
        return selectedIngredientIds.Contains(ingredientId) ? "list-item selected" : "list-item";
    }

    private HashSet<int> selectedIngredientIds = new HashSet<int>();

    private void ToggleIngredientSelection(int ingredientId)
    {
        if (!selectedIngredientIds.Add(ingredientId))
        {
            selectedIngredientIds.Remove(ingredientId);
        }
    }

    private void HandleValidSubmit()
    {
        // Tutaj można dodać logikę zapisywania przepisu
        Console.WriteLine("Przepis został dodany");
    }

    public class Recipe
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public List<Ingredient> Ingredients { get; set; } = new List<Ingredient>();
    }

    public class Ingredient
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    // Obsługa wyszukiwania składników
    private void SearchIngri()
    {
        // Wyczyszczenie obecnej listy produktów
        products.Clear();

        if (string.IsNullOrEmpty(searchIngri))
        {
            // Jeśli pole wyszukiwania jest puste, wyświetl wszystkie składniki
            products = ingredients;
        }
        else
        {
            // Filtrowanie składników według zapytania wyszukiwania
            foreach (var ingredient in ingredients)
            {
                if (ingredient.Description.Contains(searchIngri, StringComparison.OrdinalIgnoreCase)
                    || ingredient.Name.Contains(searchIngri, StringComparison.OrdinalIgnoreCase))
                {
                    products.Add(ingredient);
                }
            }
        }

        StateHasChanged(); // Aktualizacja stanu komponentu
    }

    protected override async Task OnInitializedAsync()
    {
        ingredients = await Http.GetFromJsonAsync<List<ByteCuisine.Shared.Ingredient>>("api/ingredient");
        products = await Http.GetFromJsonAsync<List<ByteCuisine.Shared.Ingredient>>("api/ingredient");
        categories = await Http.GetFromJsonAsync<List<Category>>("api/category");
    }
}