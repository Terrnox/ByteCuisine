@using ByteCuisine.Shared
@using ByteCuisine.Client.Services
@using System.Globalization
@inject HttpClient Http
@inject UserStateService UserState

<div class="showdata">
    <h1>Data In Database</h1>
    <div class="usersDatabase">
         <QuickGrid Items="users.AsQueryable()" Pagination="paginationAccount">
            <PropertyColumn TGridItem="Account" TProp="int" Property="u=>u.User_Id" />
            <PropertyColumn TGridItem="Account" TProp="string" Property="u=>u.Username" />
            <PropertyColumn TGridItem="Account" TProp="string" Property="u=>u.Role" />
            <TemplateColumn Context="u" Title="Image">
                @{
                    var base64Image = Convert.ToBase64String(u.PictureData);
                }
                <img class="UserPicture" src="data:image/png;base64,@base64Image" />
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="paginationAccount"/>
    </div>
    <hr />
    <div class ="dishesDatabase">
        <QuickGrid Items="dishes.AsQueryable()" Pagination="paginationDish">
            <PropertyColumn Property="d=>d.Dish_Id" />
            <PropertyColumn Property="d=>d.Name" />
            <PropertyColumn Property="d=>d.Category" />
            <PropertyColumn Property="d=>d.Description" />
            <TemplateColumn Context="d" Title="Image">
                @{
                    var base64Image = Convert.ToBase64String(d.DishImage);
                }
                <img class="DishPicture" src="data:image/png;base64,@base64Image" />
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="paginationDish" />
    </div>
    <hr />
    <div class="ingredientsDatabase">
        <QuickGrid Items="ingredients.AsQueryable()" Pagination="paginationIngredient">
            <PropertyColumn Property="i=>i.Ingredient_Id" />
            <PropertyColumn Property="i=>i.Name" />
            <PropertyColumn Property="i=>i.Category" />
            <PropertyColumn Property="i=>i.Description" />
            <PropertyColumn Property="i=>i.Callories" />
            <TemplateColumn Context="i" Title="Image">
                @{
                    var base64Image = Convert.ToBase64String(i.Image);
                }
                <img class="IngredientPicture" src="data:image/png;base64,@base64Image" />
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="paginationIngredient" />
    </div>
    <hr />
</div>
<div class="CSVData">
    <h1>Data In CSV File</h1>
    <div class="dishesCSV">
        <QuickGrid Items="listOfDishes.AsQueryable()" Pagination="paginationDishCSV">
            <PropertyColumn Property="d => d.Dish_Id" />
            <PropertyColumn Property="d => d.Name" />
            <PropertyColumn Property="d => d.Category" />
            <PropertyColumn Property="d => d.Description"/>
            <TemplateColumn Context="d" Title="Image">
                @{
                    var base64Image = Convert.ToBase64String(d.DishImage);
                }
                <img class="DishPicture" src="data:image/png;base64,@base64Image" />
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="paginationDishCSV" />

    </div>
</div>



@code {
    List<Account> users = new List<Account>();
    List<Dish> dishes = new List<Dish>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<DishDTO> listOfDishes = new List<DishDTO>();

    private PaginationState paginationAccount = new PaginationState { ItemsPerPage = 10 };
    private PaginationState paginationDish = new PaginationState { ItemsPerPage = 10 };
    private PaginationState paginationDishCSV = new PaginationState { ItemsPerPage = 10 };
    private PaginationState paginationIngredient = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<Account>>("api/account");
            dishes = await Http.GetFromJsonAsync<List<Dish>>("api/dish");
            ingredients = await Http.GetFromJsonAsync<List<Ingredient>>("api/ingredient");

            string csvDishDTO = await Http.GetStringAsync("sample.csv");
            ParseCsvDishDTO(csvDishDTO);
        }
        catch (Exception ex)
        {
            // Log or handle the exception appropriately
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private void ParseCsvDishDTO(string csvData)
    {
        var rows = csvData.Split("\n");
        foreach (var row in rows) // Skip header
        {
            try
            {
                var columns = row.Split(";");
                if (columns.Length >= 5)
                {
                    int id = int.Parse(columns[0]);
                    string name = columns[1];
                    string description = columns[2];
                    string image = columns[3];
                    string category = columns[4];

                    var dishDTO = new DishDTO(id, name, description, image, category);
                    listOfDishes.Add(dishDTO);
                }
            }
            catch (Exception ex)
            {
                // Log or handle the exception for a specific row
                Console.WriteLine($"Error parsing CSV row: {ex.Message}");
            }
        }
    }
}
