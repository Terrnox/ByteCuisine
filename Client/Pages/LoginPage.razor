@page "/"
@using ByteCuisine.Shared
@using ByteCuisine.Shared.DTOs
@using ByteCuisine.Client.Services
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserStateService UserState

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">


<div class="login-page">
    <div class="login-container">
        <div class="login-form">
            <div class="login-brand">
                <img src="images/logo.png" alt="ByteCuisine Logo" />
            </div>
            @if (formState)
            {
                <div class="welcome">
                    <h3>Logowanie</h3>
                </div>
                <div class="log-or-regi">
                    <button type="button" onclick="@LoginForm" class="btn-login">Login</button>
                    <button type="button" onclick="@RegisterForm" class="btn-login">Rejestracja</button>
                </div>
                <EditForm Model="@loginModel" OnValidSubmit="Login">
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            account_circle
                        </span>
                        <InputText id="username" @bind-Value="@loginModel.Username" class="input" placeholder="Nazwa użytkownika" />
                    </div>
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            key
                        </span>
                        <InputText id="password" @bind-Value="@loginModel.Password" class="input" placeholder="Hasło" type="password" />
                    </div>
                    <button type="submit" class="btn-login">Zaloguj</button>
                </EditForm>
            }
            else
            {
                <div class="welcome">
                    <h3>Rejestracja</h3>
                </div>
                <div class="log-or-regi">
                    <button type="button" onclick="@LoginForm" class="btn-login">Login</button>
                    <button type="button" onclick="@RegisterForm" class="btn-login">Rejestracja</button>
                </div>
                <EditForm Model="@registerModel" OnValidSubmit="@Register">
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            mail
                        </span>
                        <InputText id="email" @bind-Value="@registerModel.Email" class="input" placeholder="Email" />
                    </div>
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            account_circle
                        </span>
                        <InputText id="username" @bind-Value="@registerModel.Username" class="input" placeholder="Nazwa użytkownika" />
                    </div>
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            key
                        </span>
                        <InputText id="password" @bind-Value="@registerModel.Password" class="input" placeholder="Hasło" type="password" />
                    </div>
                    <div class="form-group">
                        <span class="material-symbols-outlined">
                            key
                        </span>
                        <InputText id="password" @bind-Value="@r_pass" class="input" placeholder="Powtórz hasło" type="password" />
                    </div>
                    <button type="submit" class="btn-login">Zarejestruj</button>

                </EditForm>
            }
            @* Komunikat jeżeli powórzone hasło nie jest takie samo *@
            @if (formErrorMessage == 1)
            {
                <div class="alert alert-danger">
                    <p>Hasła nie są takie same</p>
                </div>
            }
            else if (formErrorMessage == 0)
            {
                <div class="alert alert-success">
                    <p>Pomyślna rejestracja</p>
                </div>
            }
            else if (formErrorMessage == 2)
            {
                <div class="alert alert-danger">
                    <p>To nie jest e-mail</p>
                </div>
            }
            else if (formErrorMessage == 3)
            {
                <div class="alert alert-danger">
                    <p>Użytkownik o takim adresie E-mail lub nazwie użytkownika już istnieje.</p>
                </div>
            }
            <div class="forgot-password">
                <a href="#">Forgot your password?</a>
            </div>
            <div class="login-or">
                <div class="line"></div>
                <span>OR</span>
                <div class="line"></div>
            </div>
            <div class="social-btn-container">
                <!-- Facebook Button -->
                <button class="social-btn btn-facebook">
                    <img src="images/facebook.png" alt="Facebook">
                    Facebook
                </button>

                <!-- Google Button -->
                <button class="social-btn btn-google">
                    <img src="images/google.png" alt="Google">
                    Google
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private short formErrorMessage = -1;
    private string r_pass = "";
    private bool formState = true;
    private AccountDTO loginModel = new AccountDTO();
    private AccountDTO registerModel = new AccountDTO();
    private LogDTO log = new LogDTO();
    private List<Account> users = new List<Account>();

    private void LoginForm()
    {
        formState = true;
        StateHasChanged();
    }

    private void RegisterForm()
    {
        formState = false;
        StateHasChanged();
    }

    private async Task Login()
    {
        var user = users.FirstOrDefault(u => u.Username == loginModel.Username);
        if (user != null && user.Password == loginModel.Password)
        {
            log.ActivityTime = DateTime.UtcNow;
            log.ActivityName = "Logowanie";
            log.AccountId = user.User_Id;

            if (user.Role.ToLower() == "user")
            {
                Navigation.NavigateTo("/index");
                await Http.PostAsJsonAsync("api/log", log);
            }
            else if (user.Role.ToLower() == "admin")
            {
                Navigation.NavigateTo("/admin");
                await Http.PostAsJsonAsync("api/log", log);
            }

            UserState.SetCurrentUser(user.User_Id, user.Role);
        }
    }

    private async Task Register()
    {
        var user = users.FirstOrDefault(u => u.Username == registerModel.Username || u.Email == registerModel.Email);
        if (user != null)
        {
            formErrorMessage = 3;
            Console.WriteLine("Uzytkownik istnieje");
        }
        else
        {
            if (registerModel.Password == r_pass)
            {
                string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
                if (Regex.IsMatch(registerModel.Email, emailPattern))
                {
                    // Email jest prawidłowy
                    registerModel.PictureData = Convert.FromBase64String("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");
                    var lastUser = users.LastOrDefault();
                    var lastId = lastUser?.User_Id ?? 1;

                    log.ActivityTime = DateTime.UtcNow;
                    log.ActivityName = "Rejestracja";
                    log.AccountId = lastId + 1;
                    await Http.PostAsJsonAsync("api/account", registerModel);
                    await Http.PostAsJsonAsync("api/log", log);

                    await Task.Delay(150);
                    users = await Http.GetFromJsonAsync<List<Account>>("api/account");
                    // Czyszczenie formularza oraz przechodzenie do strony logowania
                    registerModel = new AccountDTO();
                    r_pass = "";
                    formState = true;
                    formErrorMessage = 0;
                    StateHasChanged();
                }
                else
                {
                    formErrorMessage = 2;
                    Console.WriteLine("To nie jest email");
                }
            }
            else
            {
                formErrorMessage = 1;
                Console.WriteLine("Hasla nie sa takie same");
			}
        }
    }

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<Account>>("api/account");
    }
}
