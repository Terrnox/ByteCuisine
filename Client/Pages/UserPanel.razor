@page "/userpanel"
@using System.Text
@using ByteCuisine.Client.Services;
@using ByteCuisine.Shared;
@inject HttpClient Http
@inject UserStateService UserState

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Icons+Outlined">
<MyNavigation />
<div class="container">
    <section class="content">
        <section class="user-section">
            <div class="user-profile-block">
                <div class="avatar-container">
                    <img class="avatar" src="data:image/png;base64,@Convert.ToBase64String(users.FirstOrDefault(u => u.User_Id == Convert.ToInt32(UserState.CurrentUser))?.PictureData)" />
                    <label for="file-upload" class="overlay-button">
                        Wybierz zdjęcie
                    </label>
                    <InputFile OnChange="HandleFileSelected" id="file-upload" class="input-file" />
                </div>

                <div class="profile-name-container">
                    <span class="user-name">@users.FirstOrDefault(u => u.User_Id == Convert.ToInt32(UserState.CurrentUser))?.Username</span>
                </div>
            </div>
            <div class="statistics-container">
                <WykresAktywnosci />
            </div>
        </section>

        <section class="my-kitchen">
            <h2>Moja Kuchnia</h2>
            <div class="scroll-buttons top">
                <button class="scroll-control prev" @onclick="() => ScrollList(-1)">
                    <span class="material-symbols-outlined">expand_less</span>
                </button>
            </div>

            <ul class="recipe-list">
                @foreach (var recipe in VisibleRecipes)
                {
                    <li class="recipe-item">
                        <img src="ścieżka_do_obrazka_dania" alt="@recipe.Name" class="recipe-image">
                        <div class="recipe-text">
                            @recipe.Name
                            <div class="recipe-rating">@DisplayStars(recipe.Rating)</div>
                        </div>
                    </li>
                }
            </ul>

            <div class="scroll-buttons bottom">
                <button class="scroll-control next" @onclick="() => ScrollList(1)">
                    <span class="material-symbols-outlined">expand_more</span>
                </button>
            </div>
        </section>
    </section>
    <section class="favorites">
        <h2>Ulubione</h2>
        <div class="carousel">
            <button class="carousel-control prev" @onclick="() => ScrollCarousel(-1)">
                <span class="material-symbols-outlined">chevron_left</span>
            </button>
            <div class="favorites-carousel">
                @foreach (var dish in VisibleFavorites)
                {
                    <div class="carousel-item">
                        <div class="carousel-image-wrapper">
                            <img src="@dish.ImageUrl" alt="@dish.Name" class="favorite-image">
                            <div class="carousel-text">@dish.Name</div>
                        </div>
                    </div>
                }
            </div>

            <button class="carousel-control next" @onclick="() => ScrollCarousel(1)">
                <span class="material-symbols-outlined">chevron_right</span>
            </button>
        </div>
    </section>
</div>

@code {
    List<Account> users = new List<Account>();

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<Account>>("api/account");
    }

    private int currentFavoriteIndex = 0;
    private int currentRecipeIndex = 0;

    private List<FavoriteDish> Favorites = new List<FavoriteDish>
    {
        new FavoriteDish { Name = "Pasta" },
        new FavoriteDish { Name = "Steak" },
        new FavoriteDish { Name = "Ramen" },
        new FavoriteDish { Name = "Curry" },
        new FavoriteDish { Name = "Spaghetti" },
        new FavoriteDish { Name = "Chicken Curry" },
        new FavoriteDish { Name = "Pizza" },
        new FavoriteDish { Name = "Sushi" },
    };

    private List<Recipe> Recipes = new List<Recipe>
    {
        new Recipe { Name = "Curry", Rating = 5 },
        new Recipe { Name = "Spaghetti", Rating = 4 },
        new Recipe { Name = "Chicken Curry", Rating = 5 },
        new Recipe { Name = "Lasagna", Rating = 4 },
        new Recipe { Name = "Burger", Rating = 5 },
    };

    private void ScrollCarousel(int direction)
    {
        int itemsPerScroll = 5;
        int maxIndex = Favorites.Count - itemsPerScroll;
        currentFavoriteIndex += direction * itemsPerScroll;

        if (currentFavoriteIndex < 0)
        {
            currentFavoriteIndex = 0;
        }
        else if (currentFavoriteIndex > maxIndex)
        {
            currentFavoriteIndex = maxIndex;
        }
    }

    private void ScrollList(int direction)
    {
        int itemsPerScroll = 3;
        int maxIndex = Recipes.Count - itemsPerScroll;
        currentRecipeIndex += direction * itemsPerScroll;

        if (currentRecipeIndex < 0)
        {
            currentRecipeIndex = 0;
        }
        else if (currentRecipeIndex > maxIndex)
        {
            currentRecipeIndex = maxIndex;
        }
    }

    private IEnumerable<FavoriteDish> VisibleFavorites => Favorites.Skip(currentFavoriteIndex).Take(5);

    private IEnumerable<Recipe> VisibleRecipes => Recipes.Skip(currentRecipeIndex).Take(3);

    private MarkupString DisplayStars(int rating)
    {
        var stars = new StringBuilder();
        for (int i = 0; i < rating; i++)
        {
            stars.Append("<span class='material-symbols-outlined star'>star</span>");
        }
        return new MarkupString(stars.ToString());
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        var base64Image = Convert.ToBase64String(buffer);
        var currentUser = users.FirstOrDefault(u => u.User_Id == Convert.ToInt32(UserState.CurrentUser));
        if (currentUser != null)
        {
            currentUser.PictureData = buffer;
            // Update the user profile picture in the backend/database as needed
            await Http.PostAsJsonAsync("api/account/updatePicture", currentUser);
        }
    }

    public class FavoriteDish
    {
        public string Name { get; set; }
        public string ImageUrl { get; set; }
    }

    public class Recipe
    {
        public string Name { get; set; }
        public int Rating { get; set; }
    }
}
