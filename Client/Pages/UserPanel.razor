@page "/userpanel"
@using System.Text
@using ByteCuisine.Client.Services;
@using ByteCuisine.Shared;
@using System.Text.RegularExpressions;
@inject HttpClient Http
@inject UserStateService UserState
@inject NavigationManager Navigation

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Icons+Outlined">
<MyNavigation />
<div class="container">
    <section class="content">
        <section class="user-section">
            <div class="user-profile-block">
                <div class="avatar-container">
                    <img class="avatar" src="data:image/png;base64,@Convert.ToBase64String(users.FirstOrDefault(u => u.User_Id == Convert.ToInt32(UserState.CurrentUser))?.PictureData)" />
                    <label for="file-upload" class="overlay-button">
                        Wybierz zdjęcie
                    </label>
                    <InputFile OnChange="HandleFileSelected" id="file-upload" class="input-file" />
                </div>

                <div class="profile-name-container">
                    <span class="user-name">@users.FirstOrDefault(u => u.User_Id == Convert.ToInt32(UserState.CurrentUser))?.Username</span>
                </div>
            </div>
            <div class="statistics-container">
                <WykresAktywnosci />
            </div>
        </section>
    </section>

    @if (userDishes.Count > 0)
    {
        <h2 class="mt-4">Przepisy dodane przez ciebie: </h2>
        <div class="carousel-container">
            <button @onclick="RollLeft" class="carousel-button left-button">
                <span class="material-symbols-outlined">arrow_back_ios</span>
            </button>
            <div class="carousel">
                @foreach (var dish in userDishes)
                {
                    <div class="card">
                        <img src="data:image/png;base64,@Convert.ToBase64String(dish.DishImage)" alt="@dish.Name" class="dish-image" />
                        <div>@dish.Name</div>
                        <div>@categories.FirstOrDefault(c => c.Id == dish.CategoryId)?.CategoryName</div>
                        <div>
                            <button id="edit-recipe-btn" @onclick="() => NavigateToEditRecipe(dish.Dish_Id)">Edytuj</button>
                        </div>
                    </div>
                }
            </div>
            <button @onclick="RollRight" class="carousel-button right-button">
                <span class="material-symbols-outlined">arrow_forward_ios</span>
            </button>
        </div>
    }
    else
    {
        <h2 class="mt-5">Jeszcze nie dodałeś swoich przepisów 🥺</h2>
    }
</div>

@code {
    List<Category> categories = new List<Category>();

    List<Log> logs = new List<Log>();

    List<Dish> dishes = new List<Dish>();

    List<Account> users = new List<Account>();

    List<Dish> userDishes = new List<Dish>();

    List<Log> userLogs = new List<Log>();



    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<Account>>("api/account");
        dishes = await Http.GetFromJsonAsync<List<Dish>>("api/dish");
        logs = await Http.GetFromJsonAsync<List<Log>>("api/log");
        categories = await Http.GetFromJsonAsync<List<Category>>("api/category");

        userLogs = logs.Where(l => l.AccountId == UserState.CurrentUser && l.ActivityName.Contains("Dodano przepis")).ToList();
        userDishes = userLogs.Select(l => ExtractDishId(l.ActivityName)).Where(id => id != null).ToList();
    }
    private void NavigateToEditRecipe(int RecipeId)
    {
        Navigation.NavigateTo($"/editrecipe/{RecipeId}");
    }

    private Dish ExtractDishId(string activityName)
	{
		var match = Regex.Match(activityName, @"\d+");
		if (match.Success)
		{
			var id = Convert.ToInt32(match.Value);
			return dishes.FirstOrDefault(d => d.Dish_Id == id);
		}
		return null;
	}

    private List<string> WszystkiePrzepisy = new List<string>
    {
        "Stek", "Jedzenie Wegetariańskie", "Posiłek", "Stek", "Stek", "Stek", "Stek", "Stek"
    };
    private int actualndex = 0;
    private int seenObjects = 1;
    private List<string> WidocznePrzepisy => WszystkiePrzepisy
        .Skip(actualndex)
        .Take(seenObjects)
        .ToList();

    private void RollLeft()
    {
        if (actualndex > 0)
        {
            actualndex--;
        }
    }

    private void RollRight()
    {
        if (actualndex < WszystkiePrzepisy.Count - seenObjects)
        {
            actualndex++;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var base64Image = Convert.ToBase64String(buffer);


        var currentUser = users.FirstOrDefault(u => u.User_Id == UserState.CurrentUser);
        if (currentUser != null)
        {
            currentUser.PictureData = Convert.FromBase64String(base64Image);
            await Http.PutAsJsonAsync("api/account/updatePicture", currentUser);
        }
    }
}
